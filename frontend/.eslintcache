[{"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/index.js":"1","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/store.js":"2","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reportWebVitals.js":"3","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/App.js":"4","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reducers/userReducers.js":"5","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reducers/cartReducers.js":"6","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reducers/productReducers.js":"7","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reducers/orderReducers.js":"8","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/LoginScreen.js":"9","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ProductScreen.js":"10","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/CartScreen.js":"11","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/HomeScreen.js":"12","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/PlaceOrderScreen.js":"13","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/UserListScreen.js":"14","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ProfileScreen.js":"15","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/OrderScreen.js":"16","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ShippingScreen.js":"17","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/PaymentScreen.js":"18","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/UserEditScreen.js":"19","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/OrderListScreen.js":"20","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ProductListScreen.js":"21","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ProductEditScreen.js":"22","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Footer.js":"23","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/RegisterScreen.js":"24","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Header.js":"25","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Loader.js":"26","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Message.js":"27","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/FormContainer.js":"28","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Product.js":"29","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Paginate.js":"30","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Rating.js":"31","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/CheckoutSteps.js":"32","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/ProductCarousel.js":"33","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/SearchBox.js":"34","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/constants/cartConstants.js":"35","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/constants/userConstants.js":"36","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/constants/productConstants.js":"37","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/constants/orderConstants.js":"38","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/actions/orderActions.js":"39","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/actions/productActions.js":"40","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/actions/userActions.js":"41","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/actions/cartActions.js":"42","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/AdminAppbar.js":"43","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/AdminDrawerMenu.js":"44","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/users/UserList.js":"45","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/orders/OrderList.js":"46","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/Admin.js":"47","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/Dashboard.js":"48","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/CustomTable.js":"49","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/CustomTableHead.js":"50","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/CustomTableBody.js":"51","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/users/UserAdminDashboard.js":"52","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/users/CreateUser.js":"53","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/users/EditUser.js":"54","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/driver/Dashboard.js":"55","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/products/ProductDashboard.js":"56","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/products/CreateProduct.js":"57","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/products/ProductList.js":"58","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/products/EditProduct.js":"59"},{"size":595,"mtime":1639168644800,"results":"60","hashOfConfig":"61"},{"size":2484,"mtime":1639192374353,"results":"62","hashOfConfig":"61"},{"size":362,"mtime":1638782074047,"results":"63","hashOfConfig":"61"},{"size":2765,"mtime":1639187221369,"results":"64","hashOfConfig":"61"},{"size":4570,"mtime":1639192519584,"results":"65","hashOfConfig":"61"},{"size":1486,"mtime":1638782074045,"results":"66","hashOfConfig":"61"},{"size":4093,"mtime":1639263881020,"results":"67","hashOfConfig":"61"},{"size":4079,"mtime":1638782074046,"results":"68","hashOfConfig":"61"},{"size":3100,"mtime":1639191924642,"results":"69","hashOfConfig":"61"},{"size":11494,"mtime":1638782074050,"results":"70","hashOfConfig":"61"},{"size":4721,"mtime":1638782074047,"results":"71","hashOfConfig":"61"},{"size":2360,"mtime":1639187133079,"results":"72","hashOfConfig":"61"},{"size":6564,"mtime":1638782074049,"results":"73","hashOfConfig":"61"},{"size":3511,"mtime":1638782074051,"results":"74","hashOfConfig":"61"},{"size":6774,"mtime":1638782074050,"results":"75","hashOfConfig":"61"},{"size":9994,"mtime":1638801344295,"results":"76","hashOfConfig":"61"},{"size":3176,"mtime":1638782074051,"results":"77","hashOfConfig":"61"},{"size":1705,"mtime":1638782074049,"results":"78","hashOfConfig":"61"},{"size":3912,"mtime":1638782074051,"results":"79","hashOfConfig":"61"},{"size":3541,"mtime":1638782074048,"results":"80","hashOfConfig":"61"},{"size":5007,"mtime":1638782074050,"results":"81","hashOfConfig":"61"},{"size":7916,"mtime":1638782074050,"results":"82","hashOfConfig":"61"},{"size":361,"mtime":1638782074040,"results":"83","hashOfConfig":"61"},{"size":5217,"mtime":1639186716052,"results":"84","hashOfConfig":"61"},{"size":2222,"mtime":1639192532054,"results":"85","hashOfConfig":"61"},{"size":458,"mtime":1638782074041,"results":"86","hashOfConfig":"61"},{"size":228,"mtime":1638782074041,"results":"87","hashOfConfig":"61"},{"size":378,"mtime":1638782074040,"results":"88","hashOfConfig":"61"},{"size":1008,"mtime":1638782074041,"results":"89","hashOfConfig":"61"},{"size":859,"mtime":1638782074041,"results":"90","hashOfConfig":"61"},{"size":1886,"mtime":1638782074042,"results":"91","hashOfConfig":"61"},{"size":1593,"mtime":1638782074040,"results":"92","hashOfConfig":"61"},{"size":1420,"mtime":1638782074041,"results":"93","hashOfConfig":"61"},{"size":984,"mtime":1638782074042,"results":"94","hashOfConfig":"61"},{"size":287,"mtime":1638782074043,"results":"95","hashOfConfig":"61"},{"size":1636,"mtime":1639168223118,"results":"96","hashOfConfig":"61"},{"size":1502,"mtime":1638782074043,"results":"97","hashOfConfig":"61"},{"size":1240,"mtime":1638782074043,"results":"98","hashOfConfig":"61"},{"size":6009,"mtime":1638782074038,"results":"99","hashOfConfig":"61"},{"size":5945,"mtime":1639264211484,"results":"100","hashOfConfig":"61"},{"size":7622,"mtime":1639258046548,"results":"101","hashOfConfig":"61"},{"size":1310,"mtime":1638782074038,"results":"102","hashOfConfig":"61"},{"size":1548,"mtime":1638811089078,"results":"103","hashOfConfig":"61"},{"size":4342,"mtime":1639247647630,"results":"104","hashOfConfig":"61"},{"size":3825,"mtime":1639257977048,"results":"105","hashOfConfig":"61"},{"size":133,"mtime":1638810840421,"results":"106","hashOfConfig":"61"},{"size":3228,"mtime":1639247825494,"results":"107","hashOfConfig":"61"},{"size":126,"mtime":1638811039030,"results":"108","hashOfConfig":"61"},{"size":6510,"mtime":1639257979481,"results":"109","hashOfConfig":"61"},{"size":2298,"mtime":1638816314556,"results":"110","hashOfConfig":"61"},{"size":3138,"mtime":1639257784629,"results":"111","hashOfConfig":"61"},{"size":499,"mtime":1639248036407,"results":"112","hashOfConfig":"61"},{"size":4521,"mtime":1639251454363,"results":"113","hashOfConfig":"61"},{"size":5245,"mtime":1639258206963,"results":"114","hashOfConfig":"61"},{"size":139,"mtime":1639187189057,"results":"115","hashOfConfig":"61"},{"size":603,"mtime":1639249975750,"results":"116","hashOfConfig":"61"},{"size":4322,"mtime":1639255509876,"results":"117","hashOfConfig":"61"},{"size":3180,"mtime":1639262896919,"results":"118","hashOfConfig":"61"},{"size":4952,"mtime":1639264221930,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"1a3m54w",{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"122"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"122"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"122"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"122"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"122"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"122"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"122"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"122"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"122"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"122"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"122"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"122"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"122"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"122"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"122"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"122"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"122"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"122"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"122"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"122"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"122"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"122"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"122"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/index.js",[],["263","264"],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/store.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reportWebVitals.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/App.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reducers/userReducers.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reducers/cartReducers.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reducers/productReducers.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/reducers/orderReducers.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/LoginScreen.js",["265"],"import React, { useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { login } from '../actions/userActions'\nimport { USER_LOGIN_CLEAR } from '../constants/userConstants';\n\n\nfunction LoginScreen({ location, history }) {\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const dispatch = useDispatch()\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { error, loading, userInfo } = userLogin;\n\n\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    };\n\n\n    useEffect(() => {\n\n        console.log('userInfo', userInfo);\n\n        if (userInfo) {\n            // set cookies\n            Cookies.set('user', JSON.stringify(userInfo));\n\n            if (userInfo.isAdmin === 'No') {\n              history.push(redirect);\n            }\n            else if (userInfo.isAdmin === 'Yes') {\n              history.push('/admin');\n            }\n        }\n\n        return(() => {\n          if (userInfo) {\n            dispatch({\n              type:USER_LOGIN_CLEAR\n            })\n          }\n        });\n    }, [history, userInfo, redirect]);\n\n    return (\n        <FormContainer>\n            <h1>Sign In</h1>\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>Email Address</Form.Label>\n                    <Form.Control\n                        type='email'\n                        placeholder='Enter Email'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Enter Password'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Sign In\n                </Button>\n            </Form>\n\n            <Row className='py-3'>\n                <Col>\n                    New Customer? <Link\n                        to={redirect ? `/register?redirect=${redirect}` : '/register'}>\n                        Register\n                        </Link>\n                </Col>\n            </Row>\n\n        </FormContainer>\n    )\n}\n\nexport default LoginScreen\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ProductScreen.js",["266"],"import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listProductDetails, createProductReview } from '../actions/productActions'\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants'\n\nfunction ProductScreen({ match, history }) {\n    const [qty, setQty] = useState(1)\n    const [rating, setRating] = useState(0)\n    const [comment, setComment] = useState('')\n\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const { loading, error, product } = productDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\n    const {\n        loading: loadingProductReview,\n        error: errorProductReview,\n        success: successProductReview,\n    } = productReviewCreate\n\n    useEffect(() => {\n        if (successProductReview) {\n            setRating(0)\n            setComment('')\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\n        }\n\n        dispatch(listProductDetails(match.params.id))\n\n    }, [dispatch, match, successProductReview])\n\n    const addToCartHandler = () => {\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(createProductReview(\n            match.params.id, {\n            rating,\n            comment\n        }\n        ))\n    }\n\n    return (\n        <div>\n            <Link to='/' className='btn btn-light my-3'>Go Back</Link>\n            {loading ?\n                <Loader />\n                : error\n                    ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <div>\n                            <Row>\n                                <Col md={6}>\n                                    <Image src={product.image} alt={product.name} fluid />\n                                </Col>\n\n\n                                <Col md={3}>\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item>\n                                            <h3>{product.name}</h3>\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            Price: ${product.price}\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            Description: {product.description}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Col>\n\n\n                                <Col md={3}>\n                                    <Card>\n                                        <ListGroup variant='flush'>\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>Price:</Col>\n                                                    <Col>\n                                                        <strong>${product.price}</strong>\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>Status:</Col>\n                                                    <Col>\n                                                        {product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n\n                                            {product.countInStock > 0 && (\n                                                <ListGroup.Item>\n                                                    <Row>\n                                                        <Col>Qty</Col>\n                                                        <Col xs='auto' className='my-1'>\n                                                            <Form.Control\n                                                                as=\"select\"\n                                                                value={qty}\n                                                                onChange={(e) => setQty(e.target.value)}\n                                                            >\n                                                                {\n\n                                                                    [...Array(product.countInStock).keys()].map((x) => (\n                                                                        <option key={x + 1} value={x + 1}>\n                                                                            {x + 1}\n                                                                        </option>\n                                                                    ))\n                                                                }\n\n                                                            </Form.Control>\n                                                        </Col>\n                                                    </Row>\n                                                </ListGroup.Item>\n                                            )}\n\n\n                                            <ListGroup.Item>\n                                                <Button\n                                                    onClick={addToCartHandler}\n                                                    className='btn-block'\n                                                    disabled={product.countInStock == 0}\n                                                    type='button'>\n                                                    Add to Cart\n                                                </Button>\n                                            </ListGroup.Item>\n                                        </ListGroup>\n                                    </Card>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col md={6}>\n                                    <h4>Reviews</h4>\n                                    {product.reviews.length === 0 && <Message variant='info'>No Reviews</Message>}\n\n                                    <ListGroup variant='flush'>\n                                        {product.reviews.map((review) => (\n                                            <ListGroup.Item key={review._id}>\n                                                <strong>{review.name}</strong>\n                                                <Rating value={review.rating} color='#f8e825' />\n                                                <p>{review.createdAt.substring(0, 10)}</p>\n                                                <p>{review.comment}</p>\n                                            </ListGroup.Item>\n                                        ))}\n\n                                        <ListGroup.Item>\n                                            <h4>Write a review</h4>\n\n                                            {loadingProductReview && <Loader />}\n                                            {successProductReview && <Message variant='success'>Review Submitted</Message>}\n                                            {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\n\n                                            {userInfo ? (\n                                                <Form onSubmit={submitHandler}>\n                                                    <Form.Group controlId='rating'>\n                                                        <Form.Label>Rating</Form.Label>\n                                                        <Form.Control\n                                                            as='select'\n                                                            value={rating}\n                                                            onChange={(e) => setRating(e.target.value)}\n                                                        >\n                                                            <option value=''>Select...</option>\n                                                            <option value='1'>1 - Poor</option>\n                                                            <option value='2'>2 - Fair</option>\n                                                            <option value='3'>3 - Good</option>\n                                                            <option value='4'>4 - Very Good</option>\n                                                            <option value='5'>5 - Excellent</option>\n                                                        </Form.Control>\n                                                    </Form.Group>\n\n                                                    <Form.Group controlId='comment'>\n                                                        <Form.Label>Review</Form.Label>\n                                                        <Form.Control\n                                                            as='textarea'\n                                                            row='5'\n                                                            value={comment}\n                                                            onChange={(e) => setComment(e.target.value)}\n                                                        ></Form.Control>\n                                                    </Form.Group>\n\n                                                    <Button\n                                                        disabled={loadingProductReview}\n                                                        type='submit'\n                                                        variant='primary'\n                                                    >\n                                                        Submit\n                                                    </Button>\n\n                                                </Form>\n                                            ) : (\n                                                    <Message variant='info'>Please <Link to='/login'>login</Link> to write a review</Message>\n                                                )}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                    )\n\n            }\n\n\n        </div >\n    )\n}\n\nexport default ProductScreen\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/CartScreen.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/HomeScreen.js",["267"],"import React, { useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col } from 'react-bootstrap'\nimport Product from '../components/Product'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport ProductCarousel from '../components/ProductCarousel'\nimport { listProducts } from '../actions/productActions'\n\n\n\nfunction HomeScreen ({displayHeader}) {\n    const dispatch = useDispatch()\n    const productList = useSelector(state => state.productList);\n    const { error, loading, products, page, pages } = productList;\n\n    const history = useHistory();\n    let keyword = history.location.search\n\n\n    const readCookies = () => {\n      try {\n        const cookies = JSON.parse(Cookies.get('user'));\n\n        return cookies;\n      }\n      catch (error) {\n        return undefined;\n      }\n    }\n\n    useEffect(() => {\n\n        const cookies = readCookies();\n\n        if (cookies) {\n            if (cookies.isAdmin === 'Yes')\n              history.push('/admin');\n            else if (cookies.isAdmin === 'No') {\n              if (cookies.type === 'customer') {\n                history.push('/');\n              }\n              else if (cookies.type === 'driver') {\n                history.push('/driver');\n              }\n            }\n        }\n        else {\n          dispatch(listProducts(keyword))\n          displayHeader();\n        }\n    }, [dispatch, keyword, displayHeader]);\n\n    return (\n        <div>\n            {!keyword && <ProductCarousel />}\n\n            <h1>Latest Products</h1>\n            {loading ? <Loader />\n                : error ? <Message variant='danger'>{error}</Message>\n                    :\n                    <div>\n                        <Row>\n                            {products.map(product => (\n                                <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\n                                    <Product product={product} />\n                                </Col>\n                            ))}\n                        </Row>\n                        <Paginate page={page} pages={pages} keyword={keyword} />\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default HomeScreen\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/PlaceOrderScreen.js",["268","269"],"import React, { useState, useEffect } from 'react'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { createOrder } from '../actions/orderActions'\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\n\nfunction PlaceOrderScreen({ history }) {\n\n    const orderCreate = useSelector(state => state.orderCreate)\n    const { order, error, success } = orderCreate\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\n    cart.taxPrice = Number((0.082) * cart.itemsPrice).toFixed(2)\n\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\n\n\n    if (!cart.paymentMethod) {\n        history.push('/payment')\n    }\n\n    useEffect(() => {\n        if (success) {\n            history.push(`/order/${order._id}`)\n            dispatch({ type: ORDER_CREATE_RESET })\n        }\n    }, [success, history])\n\n    const placeOrder = () => {\n        dispatch(createOrder({\n            orderItems: cart.cartItems,\n            shippingAddress: cart.shippingAddress,\n            paymentMethod: cart.paymentMethod,\n            itemsPrice: cart.itemsPrice,\n            shippingPrice: cart.shippingPrice,\n            taxPrice: cart.taxPrice,\n            totalPrice: cart.totalPrice,\n        }))\n    }\n\n    return (\n        <div>\n            <CheckoutSteps step1 step2 step3 step4 />\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Shipping</h2>\n\n                            <p>\n                                <strong>Shipping: </strong>\n                                {cart.shippingAddress.address},  {cart.shippingAddress.city}\n                                {'  '}\n                                {cart.shippingAddress.postalCode},\n                                {'  '}\n                                {cart.shippingAddress.country}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Payment Method</h2>\n                            <p>\n                                <strong>Method: </strong>\n                                {cart.paymentMethod}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\n                                Your cart is empty\n                            </Message> : (\n                                    <ListGroup variant='flush'>\n                                        {cart.cartItems.map((item, index) => (\n                                            <ListGroup.Item key={index}>\n                                                <Row>\n                                                    <Col md={1}>\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\n                                                    </Col>\n\n                                                    <Col>\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                    </Col>\n\n                                                    <Col md={4}>\n                                                        {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n                                )}\n                        </ListGroup.Item>\n\n                    </ListGroup>\n\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items:</Col>\n                                    <Col>${cart.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Shipping:</Col>\n                                    <Col>${cart.shippingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Tax:</Col>\n                                    <Col>${cart.taxPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total:</Col>\n                                    <Col>${cart.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n\n                            <ListGroup.Item>\n                                {error && <Message variant='danger'>{error}</Message>}\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Button\n                                    type='button'\n                                    className='btn-block'\n                                    disabled={cart.cartItems === 0}\n                                    onClick={placeOrder}\n                                >\n                                    Place Order\n                                </Button>\n                            </ListGroup.Item>\n\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default PlaceOrderScreen\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/UserListScreen.js",["270"],"import React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listUsers, deleteUser } from '../actions/userActions'\n\nfunction UserListScreen({ history }) {\n\n    const dispatch = useDispatch()\n\n    const userList = useSelector(state => state.userList)\n    const { loading, error, users } = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userDelete = useSelector(state => state.userDelete)\n    const { success: successDelete } = userDelete\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listUsers())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, successDelete, userInfo])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Are you sure you want to delete this user?')) {\n            dispatch(deleteUser(id))\n        }\n    }\n\n    return (\n        <div>\n            <h1>Users</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>NAME</th>\n                                    <th>EMAIL</th>\n                                    <th>ADMIN</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {users.map(user => (\n                                    <tr key={user._id}>\n                                        <td>{user._id}</td>\n                                        <td>{user.name}</td>\n                                        <td>{user.email}</td>\n                                        <td>{user.isAdmin ? (\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}</td>\n\n                                        <td>\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    <i className='fas fa-edit'></i>\n                                                </Button>\n                                            </LinkContainer>\n\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nexport default UserListScreen\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ProfileScreen.js",["271","272"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\nimport { listMyOrders } from '../actions/orderActions'\n\nfunction ProfileScreen({ history }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\n\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        } else {\n            if (!user || !user.name || success || userInfo._id !== user._id) {\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, history, userInfo, user, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(updateUserProfile({\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password\n            }))\n            setMessage('')\n        }\n\n    }\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>User Profile</h2>\n\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n\n                    <Form.Group controlId='name'>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control\n                            required\n                            type='name'\n                            placeholder='Enter name'\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='email'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            required\n                            type='email'\n                            placeholder='Enter Email'\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Enter Password'\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='passwordConfirm'>\n                        <Form.Label>Confirm Password</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Confirm Password'\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Button type='submit' variant='primary'>\n                        Update\n                </Button>\n\n                </Form>\n            </Col>\n\n            <Col md={9}>\n                <h2>My Orders</h2>\n                {loadingOrders ? (\n                    <Loader />\n                ) : errorOrders ? (\n                    <Message variant='danger'>{errorOrders}</Message>\n                ) : (\n                            <Table striped responsive className='table-sm'>\n                                <thead>\n                                    <tr>\n                                        <th>ID</th>\n                                        <th>Date</th>\n                                        <th>Total</th>\n                                        <th>Paid</th>\n                                        <th>Delivered</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {orders.map(order => (\n                                        <tr key={order._id}>\n                                            <td>{order._id}</td>\n                                            <td>{order.createdAt.substring(0, 10)}</td>\n                                            <td>${order.totalPrice}</td>\n                                            <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}</td>\n                                            <td>\n                                                <LinkContainer to={`/order/${order._id}`}>\n                                                    <Button className='btn-sm'>Details</Button>\n                                                </LinkContainer>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                        )}\n            </Col>\n        </Row>\n    )\n}\n\nexport default ProfileScreen","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/OrderScreen.js",["273","274"],"import React, { useState, useEffect } from 'react'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n// import { PayPalButton } from 'react-paypal-button-v2'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\n\nfunction OrderScreen({ match, history }) {\n    const orderId = match.params.id\n    const dispatch = useDispatch()\n\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const orderDetails = useSelector(state => state.orderDetails)\n    const { order, error, loading } = orderDetails\n\n    const orderPay = useSelector(state => state.orderPay)\n    const { loading: loadingPay, success: successPay } = orderPay\n\n    const orderDeliver = useSelector(state => state.orderDeliver)\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n    if (!loading && !error) {\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    }\n\n\n    const addPayPalScript = () => {\n        const script = document.createElement('script')\n        script.type = 'text/javascript'\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn'\n        script.async = true\n        script.onload = () => {\n            setSdkReady(true)\n        }\n        document.body.appendChild(script)\n    }\n\n    useEffect(() => {\n\n        if (!userInfo) {\n            history.push('/login')\n        }\n\n        if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\n            dispatch({ type: ORDER_PAY_RESET })\n            dispatch({ type: ORDER_DELIVER_RESET })\n\n            dispatch(getOrderDetails(orderId))\n        } else if (!order.isPaid) {\n            if (!window.paypal) {\n                addPayPalScript()\n            } else {\n                setSdkReady(true)\n            }\n        }\n    }, [dispatch, order, orderId, successPay, successDeliver])\n\n\n    const successPaymentHandler = (paymentResult) => {\n        dispatch(payOrder(orderId, paymentResult))\n    }\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n    return loading ? (\n        <Loader />\n    ) : error ? (\n        <Message variant='danger'>{error}</Message>\n    ) : (\n                <div>\n                    <h1>Order: {order.Id}</h1>\n                    <Row>\n                        <Col md={8}>\n                            <ListGroup variant='flush'>\n                                <ListGroup.Item>\n                                    <h2>Shipping</h2>\n                                    <p><strong>Name: </strong> {order.user.name}</p>\n                                    <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n                                    <p>\n                                        <strong>Shipping: </strong>\n                                        {order.shippingAddress.address},  {order.shippingAddress.city}\n                                        {'  '}\n                                        {order.shippingAddress.postalCode},\n                                {'  '}\n                                        {order.shippingAddress.country}\n                                    </p>\n\n                                    {order.isDelivered ? (\n                                        <Message variant='success'>Delivered on {order.deliveredAt}</Message>\n                                    ) : (\n                                            <Message variant='warning'>Not Delivered</Message>\n                                        )}\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <h2>Payment Method</h2>\n                                    <p>\n                                        <strong>Method: </strong>\n                                        {order.paymentMethod}\n                                    </p>\n                                    {order.isPaid ? (\n                                        <Message variant='success'>Paid on {order.paidAt}</Message>\n                                    ) : (\n                                            <Message variant='warning'>Not Paid</Message>\n                                        )}\n\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <h2>Order Items</h2>\n                                    {order.orderItems.length === 0 ? <Message variant='info'>\n                                        Order is empty\n                            </Message> : (\n                                            <ListGroup variant='flush'>\n                                                {order.orderItems.map((item, index) => (\n                                                    <ListGroup.Item key={index}>\n                                                        <Row>\n                                                            <Col md={1}>\n                                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                                            </Col>\n\n                                                            <Col>\n                                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                            </Col>\n\n                                                            <Col md={4}>\n                                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n                                                ))}\n                                            </ListGroup>\n                                        )}\n                                </ListGroup.Item>\n\n                            </ListGroup>\n\n                        </Col>\n\n                        <Col md={4}>\n                            <Card>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item>\n                                        <h2>Order Summary</h2>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Items:</Col>\n                                            <Col>${order.itemsPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Shipping:</Col>\n                                            <Col>${order.shippingPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Tax:</Col>\n                                            <Col>${order.taxPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Total:</Col>\n                                            <Col>${order.totalPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n\n                                    {!order.isPaid && (\n                                        <ListGroup.Item>\n                                            {loadingPay && <Loader />}\n\n                                            {!sdkReady ? (\n                                                <Loader />\n                                            ) : (\n                                                    // <PayPalButton\n                                                    //     amount={order.totalPrice}\n                                                    //     onSuccess={successPaymentHandler}\n                                                    // />\n                                                    <Button>Button</Button>\n                                                )}\n                                        </ListGroup.Item>\n                                    )}\n                                </ListGroup>\n                                {loadingDeliver && <Loader />}\n                                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                                    <ListGroup.Item>\n                                        <Button\n                                            type='button'\n                                            className='btn btn-block'\n                                            onClick={deliverHandler}\n                                        >\n                                            Mark As Delivered\n                                        </Button>\n                                    </ListGroup.Item>\n                                )}\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n            )\n}\n\nexport default OrderScreen\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ShippingScreen.js",["275"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { saveShippingAddress } from '../actions/cartActions'\n\nfunction ShippingScreen({ history }) {\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\n    const [country, setCountry] = useState(shippingAddress.country)\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\n        history.push('/payment')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 />\n            <h1>Shipping</h1>\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='address'>\n                    <Form.Label>Address</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Enter address'\n                        value={address ? address : ''}\n                        onChange={(e) => setAddress(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='city'>\n                    <Form.Label>City</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Enter city'\n                        value={city ? city : ''}\n                        onChange={(e) => setCity(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='postalCode'>\n                    <Form.Label>Postal Code</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Enter postal code'\n                        value={postalCode ? postalCode : ''}\n                        onChange={(e) => setPostalCode(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='country'>\n                    <Form.Label>Country</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Enter country'\n                        value={country ? country : ''}\n                        onChange={(e) => setCountry(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Continue\n                </Button>\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default ShippingScreen\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/PaymentScreen.js",["276"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { savePaymentMethod } from '../actions/cartActions'\n\nfunction PaymentScreen({ history }) {\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\n\n    if (!shippingAddress.address) {\n        history.push('/shipping')\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        history.push('/placeorder')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 step3 />\n\n            <Form onSubmit={submitHandler}>\n                <Form.Group>\n                    <Form.Label as='legend'>Select Method</Form.Label>\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='PayPal or Credit Card'\n                            id='paypal'\n                            name='paymentMethod'\n                            checked\n                            onChange={(e) => setPaymentMethod(e.target.value)}\n                        >\n\n                        </Form.Check>\n                    </Col>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Continue\n                </Button>\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default PaymentScreen\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/UserEditScreen.js",["277"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { getUserDetails, updateUser } from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\nfunction UserEditScreen({ match, history }) {\n\n    const userId = match.params.id\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\n\n    useEffect(() => {\n\n        if (successUpdate) {\n            dispatch({ type: USER_UPDATE_RESET })\n            history.push('/admin/userlist')\n        } else {\n\n            if (!user.name || user._id !== Number(userId)) {\n                dispatch(getUserDetails(userId))\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n        }\n\n    }, [user, userId, successUpdate, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\n    }\n\n    return (\n        <div>\n            <Link to='/admin/userlist'>\n                Go Back\n            </Link>\n\n            <FormContainer>\n                <h1>Edit User</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId='name'>\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control\n\n                                    type='name'\n                                    placeholder='Enter name'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='email'>\n                                <Form.Label>Email Address</Form.Label>\n                                <Form.Control\n                                    type='email'\n                                    placeholder='Enter Email'\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='isadmin'>\n                                <Form.Check\n                                    type='checkbox'\n                                    label='Is Admin'\n                                    checked={isAdmin}\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\n                                >\n                                </Form.Check>\n                            </Form.Group>\n\n                            <Button type='submit' variant='primary'>\n                                Update\n                        </Button>\n\n                        </Form>\n                    )}\n\n            </FormContainer >\n        </div>\n\n    )\n}\n\nexport default UserEditScreen","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/OrderListScreen.js",["278"],"import React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listOrders } from '../actions/orderActions'\n\nfunction OrderListScreen({ history }) {\n\n    const dispatch = useDispatch()\n\n    const orderList = useSelector(state => state.orderList)\n    const { loading, error, orders } = orderList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listOrders())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, userInfo])\n\n\n    return (\n        <div>\n            <h1>Orders</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>USER</th>\n                                    <th>DATE</th>\n                                    <th>Total</th>\n                                    <th>PAID</th>\n                                    <th>DELIVERED</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {orders.map(order => (\n                                    <tr key={order._id}>\n                                        <td>{order._id}</td>\n                                        <td>{order.user && order.user.name}</td>\n                                        <td>{order.createdAt.substring(0, 10)}</td>\n                                        <td>${order.totalPrice}</td>\n\n                                        <td>{order.isPaid ? (\n                                            order.paidAt.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>{order.isDelivered ? (\n                                            order.deliveredAt.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>\n                                            <LinkContainer to={`/order/${order._id}`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    Details\n                                                </Button>\n                                            </LinkContainer>\n\n\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nexport default OrderListScreen","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ProductListScreen.js",["279"],"import React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\n\nfunction ProductListScreen({ history, match }) {\n\n    const dispatch = useDispatch()\n\n    const productList = useSelector(state => state.productList)\n    const { loading, error, products, pages, page } = productList\n\n    const productDelete = useSelector(state => state.productDelete)\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\n\n    const productCreate = useSelector(state => state.productCreate)\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\n\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    let keyword = history.location.search\n    useEffect(() => {\n        dispatch({ type: PRODUCT_CREATE_RESET })\n\n        if (!userInfo.isAdmin) {\n            history.push('/login')\n        }\n\n        if (successCreate) {\n            history.push(`/admin/product/${createdProduct._id}/edit`)\n        } else {\n            dispatch(listProducts(keyword))\n        }\n\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Are you sure you want to delete this product?')) {\n            dispatch(deleteProduct(id))\n        }\n    }\n\n    const createProductHandler = () => {\n        dispatch(createProduct())\n    }\n\n    return (\n        <div>\n            <Row className='align-items-center'>\n                <Col>\n                    <h1>Products</h1>\n                </Col>\n\n                <Col className='text-right'>\n                    <Button className='my-3' onClick={createProductHandler}>\n                        <i className='fas fa-plus'></i> Create Product\n                    </Button>\n                </Col>\n            </Row>\n\n            {loadingDelete && <Loader />}\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n\n            {loadingCreate && <Loader />}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <div>\n                            <Table striped bordered hover responsive className='table-sm'>\n                                <thead>\n                                    <tr>\n                                        <th>ID</th>\n                                        <th>NAME</th>\n                                        <th>PRICE</th>\n                                        <th>CATEGORY</th>\n                                        <th>BRAND</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {products.map(product => (\n                                        <tr key={product._id}>\n                                            <td>{product._id}</td>\n                                            <td>{product.name}</td>\n                                            <td>${product.price}</td>\n                                            <td>{product.category}</td>\n                                            <td>{product.brand}</td>\n\n                                            <td>\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                                    <Button variant='light' className='btn-sm'>\n                                                        <i className='fas fa-edit'></i>\n                                                    </Button>\n                                                </LinkContainer>\n\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\n                                                    <i className='fas fa-trash'></i>\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                            <Paginate pages={pages} page={page} isAdmin={true} />\n                        </div>\n                    )}\n        </div>\n    )\n}\n\nexport default ProductListScreen","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/ProductEditScreen.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Footer.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/screens/RegisterScreen.js",["280","281"],"import React, { useState, useEffect } from 'react'\nimport Cookies from 'js-cookie';\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { register } from '../actions/userActions'\nimport { USER_CREATE_RESET } from '../constants/userConstants';\n\n\nfunction RegisterScreen({ location, history }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [mobile, setMobile] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, loading, userInfo } = userRegister\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(\n              register({\n                name,\n                username: email,\n                type: 'customer',\n                mobile,\n                password\n              })\n            );\n        }\n    }\n\n    const readCookies = () => {\n      try {\n        const cookies = JSON.parse(Cookies.get('user'));\n\n        return cookies;\n      }\n      catch (error) {\n        return undefined;\n      }\n    }\n\n    useEffect(() => {\n      const cookie = readCookies();\n\n      if (cookie) {\n        if (cookie.isAdmin === 'Yes')\n          history.push('/admin');\n        else if (cookie.isAdmin === 'No')\n          history.push('/');\n      }\n      if (userInfo) {\n          history.push('/login')\n      }\n\n      return(() => {\n        if (userInfo) {\n          dispatch({\n            type: USER_CREATE_RESET\n          });\n        }\n      });\n    }, [history, userInfo, redirect])\n\n    return (\n        <FormContainer>\n            <h1>Sign In</h1>\n            {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                        required\n                        type='name'\n                        placeholder='Enter name'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>Email Address</Form.Label>\n                    <Form.Control\n                        required\n                        type='email'\n                        placeholder='Enter Email'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='mobile'>\n                    <Form.Label>Mobile Number</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='83210054'\n                        value={mobile}\n                        onChange={(e) => setMobile(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Enter Password'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='passwordConfirm'>\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Confirm Password'\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Register\n                </Button>\n\n            </Form>\n\n            <Row className='py-3'>\n                <Col>\n                    Have an Account? <Link\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\n                        Sign In\n                        </Link>\n                </Col>\n            </Row>\n        </FormContainer >\n    )\n}\n\nexport default RegisterScreen\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Header.js",["282","283"],"import React, { useEffect, useState } from 'react'\nimport Cookies from 'js-cookie';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Navbar, Nav, Container, NavDropdown } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport SearchBox from './SearchBox'\nimport { logout } from '../actions/userActions'\n\nfunction Header(props) {\n\n  const [ showHeader, setShowHeader ] = useState(false);\n\n  const userCookies = useSelector(state => state.userCookie);\n  const { userInfo } = userCookies;\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n\n  const logoutHandler = () => {\n    dispatch(logout());\n  }\n\n  useEffect(() => {\n    setShowHeader(props.show);\n  }, [showHeader, props.show, userInfo]);\n\n  return (\n    <>\n      {showHeader ?(\n        <header>\n          <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n            <Container>\n              <LinkContainer to='/'>\n                <Navbar.Brand>TrioPizza</Navbar.Brand>\n              </LinkContainer>\n\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n              <Navbar.Collapse id=\"basic-navbar-nav\">\n                <SearchBox />\n                <Nav className=\"ml-auto\">\n\n                  <LinkContainer to='/cart'>\n                    <Nav.Link ><i className=\"fas fa-shopping-cart\"></i>Cart</Nav.Link>\n                  </LinkContainer>\n\n                  {userInfo ? (\n                    <NavDropdown title={userInfo.name} id='username'>\n                      <LinkContainer to='/profile'>\n                        <NavDropdown.Item>Profile</NavDropdown.Item>\n                      </LinkContainer>\n\n                      <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\n\n                    </NavDropdown>\n                  ) : (\n                    <LinkContainer to='/login'>\n                      <Nav.Link><i className=\"fas fa-user\"></i>Login</Nav.Link>\n                    </LinkContainer>\n                    )}\n\n                </Nav>\n              </Navbar.Collapse>\n            </Container>\n          </Navbar>\n        </header>)\n        : <></>\n      }\n    </>\n  )\n}\n\nexport default Header\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Loader.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Message.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/FormContainer.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Product.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Paginate.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/Rating.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/CheckoutSteps.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/ProductCarousel.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/components/SearchBox.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/constants/cartConstants.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/constants/userConstants.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/constants/productConstants.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/constants/orderConstants.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/actions/orderActions.js",["284","285","286"],"import axios from 'axios'\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n\n    ORDER_PAY_REQUEST,\n    ORDER_PAY_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_RESET,\n\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_RESET,\n\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_FAIL,\n\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_RESET,\n} from '../constants/orderConstants'\n\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/orders/add/`,\n            order,\n            config\n        )\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload: data\n        })\n\n        localStorage.removeItem('cartItems')\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_PAY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${id}/pay/`,\n            paymentResult,\n            config\n        )\n\n        dispatch({\n            type: ORDER_PAY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_PAY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DELIVER_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${order._id}/deliver/`,\n            {},\n            config\n        )\n\n        dispatch({\n            type: ORDER_DELIVER_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DELIVER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_MY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/myorders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_MY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_MY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/actions/productActions.js",["287","288","289"],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/actions/userActions.js",["290","291","292"],"import axios from 'axios'\nimport {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n\n} from '../constants/userConstants'\n\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\n\nimport Cookie from 'js-cookie';\n\n\nfunction setUserCookie (userInfo) {\n  Cookie.set('user', JSON.stringify(userInfo));\n}\n\n\nfunction removeUserCookie () {\n  Cookie.remove('user');\n}\n\nfunction getTokenFromCookie () {\n  try {\n    const user = JSON.parse(Cookie.get('user'));\n    return user;\n  }\n  catch (error) {\n    console.error(error);\n  }\n}\n\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        });\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        };\n\n        const { data } = await axios.post(\n            '/api/users/login/',\n            { 'username': email, 'password': password },\n            config\n        );\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        });\n\n        dispatch({\n          type: 'read_cookie_success',\n          payload: data\n        });\n\n        setUserCookie(data);\n\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT });\n    dispatch({ type: USER_DETAILS_RESET });\n    dispatch({ type: ORDER_LIST_MY_RESET });\n    dispatch({ type: USER_LIST_RESET });\n    dispatch({ type: 'remove_user_cookie' });\n    removeUserCookie();\n}\n\n\nexport const register = (user) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n        console.log(user);\n        const { data } = await axios.post ( '/api/users/',\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        });\n\n    } catch (error) {\n        console.log(error.response);\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: (error?.response?.data?.details)\n                ? error.response.data.details\n                : error.message,\n        })\n    }\n}\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        });\n\n        const { token } = getTokenFromCookie();\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/${id}/`,\n            config\n        );\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        });\n\n\n    } catch (error) {\n        console.log('error', error.response);\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response?.data?.details\n                ? error.response.data.details\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const {\n            userCookie: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.details\n                ? error.response.data.details\n                : error.message,\n        })\n    }\n}\n\n\nexport const listUsers = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                // Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/`,\n            config\n        )\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.details\n                ? error.response.data.details\n                : error.message,\n        })\n    }\n}\n\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                // Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/users/${id}/`,\n            config\n        );\n\n        console.log(data);\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload: error.response && error.response.data.details\n                ? error.response.data.details\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUser = (id, user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST\n        });\n\n        const {\n            userCookie: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/${id}/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n            payload: data\n        });\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.details\n                ? error.response.data.details\n                : error.message,\n        })\n    }\n}\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/actions/cartActions.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/AdminAppbar.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/AdminDrawerMenu.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/users/UserList.js",["293"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\n\nimport AddIcon from '@mui/icons-material/Add';\nimport FileDownloadIcon from '@mui/icons-material/FileDownload';\nimport RefreshIcon from '@mui/icons-material/Refresh';\n\nimport CustomTable from '../CustomTable';\nimport EditUser from './EditUser';\n\nimport { listUsers } from '../../actions/userActions';\n\n\nconst styles = {\n  topContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: '25px',\n    padding: '10px'\n  },\n  searchInput: {\n    maxWidth: '200px'\n  }\n}\n\nconst columns = [\n  { id: 'id', label: 'ID', maxWidth: 70 },\n  { id: 'name', label: 'Name', minWidth: 170 },\n  {\n    id: 'username',\n    label: 'Email',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'mobile',\n    label: 'Mobile',\n    maxWidth: 150,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'type',\n    label: 'User Type',\n    minWidth: 100,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'isAdmin',\n    label: 'Admin',\n    maxWidth: 170,\n    align: 'right',\n    format: (value) => value.toFixed(2),\n  },\n];\n\n\nexport default function UserList({addNewUser}) {\n\n  const [ openEditUser, setOpenEditUser ] = useState(false);\n  const [ editingID, setEditingID ] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const userList = useSelector(state => state.userList);\n  const { loading, error, users } = userList;\n\n\n  const editUser = (id) => {\n    setEditingID(id);\n    setOpenEditUser(true);\n  }\n\n\n  const handleAddButtonOnClick = (event) => {\n    event.preventDefault();\n    console.log('handleAddButtonOnClick!')\n    addNewUser();\n  }\n\n\n  useEffect(() => {\n    if (!openEditUser) {\n      dispatch(listUsers());\n    }\n  }, [openEditUser]);\n\n  return (\n    <>\n    {openEditUser\n      ? (\n        <EditUser\n          closeEditUser={() => setOpenEditUser(false)}\n          editingID={editingID}\n        />\n      )\n      : (\n        <>\n        {loading\n          ? \"Loading ...\"\n          : (\n            <>\n            { error\n              ? \"Error Loading Users\"\n              : (\n                <>\n                  <Paper\n                    sx={styles.topContainer}\n                  >\n                    <Box sx={{width: '40%', maxWidth: '400px'}}>\n                      <TextField fullWidth label=\"Search\" variant=\"outlined\" size=\"small\"/>\n                    </Box>\n\n                    <Box>\n                      <Button\n                        sx={{margin: '10px'}}\n                        variant=\"contained\"\n                        color=\"success\"\n                        onClick={handleAddButtonOnClick}\n                        endIcon={<AddIcon />}\n                      >\n                        Add\n                      </Button>\n                      <Button sx={{margin: '10px'}} variant=\"contained\" endIcon={<FileDownloadIcon />}>\n                        Export\n                      </Button>\n                      <IconButton>\n                        <RefreshIcon color=\"primary\" />\n                      </IconButton>\n                    </Box>\n                  </Paper>\n\n                  <CustomTable\n                    columns={columns}\n                    rows={users}\n                    type=\"user\"\n                    edit={editUser}\n                  />\n                </>\n              )\n            }\n            </>\n          )\n        }\n        </>\n      )\n    }\n    </>\n  );\n}\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/orders/OrderList.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/Admin.js",["294"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { styled, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport AdminAppbar from './AdminAppbar';\nimport AdminDrawerMenu from './AdminDrawerMenu';\nimport Dashboard from './Dashboard';\nimport UserAdminDashboard from './users/UserAdminDashboard';\nimport ProductDashboard from './products/ProductDashboard';\nimport OrderList from './orders/OrderList';\nimport { logout } from '../actions/userActions';\n\n\nconst drawerWidth = 240;\n\nconst openedMixin = (theme) => ({\n  width: drawerWidth,\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.enteringScreen,\n  }),\n  overflowX: 'hidden',\n});\n\nconst closedMixin = (theme) => ({\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  overflowX: 'hidden',\n  width: `calc(${theme.spacing(7)} + 1px)`,\n  [theme.breakpoints.up('sm')]: {\n    width: `calc(${theme.spacing(9)} + 1px)`,\n  },\n});\n\nconst DrawerHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n}));\n\n\nfunction switchContents (page) {\n\t\tswitch (page) {\n\t\t\tcase 'Dashboard':\n\t\t\t\treturn <Dashboard />;\n\t\t\tcase 'Users':\n\t\t\t\treturn <UserAdminDashboard />;\n\t\t\tcase 'Products':\n\t\t\t\treturn <ProductDashboard />;\n\t\t\tcase 'Orders':\n\t\t\t\treturn <OrderList />;\n\t\t\tdefault:\n\t\t\t\tthrow new Error ('Invalid Admin Page Content');\n\t\t}\n}\n\n\nexport default function Admin ({hideHeader}) {\n\n  const theme = useTheme();\n  const [ open, setOpen ] = useState(false);\n\tconst [ page, setPage ] = useState('Dashboard');\n\tconst [ pageTitle, setPageTitle ] = useState('Dashboard');\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const userCookie = useSelector(state => state.userCookie);\n  const { userInfo } = userCookie;\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n\tconst onChangePage = (page) => {\n    console.log(page);\n\t\tif (page === 'Sign Out') {\n      // sign out user\n      dispatch(logout());\n    }\n    else {\n      setPage(page);\n    }\n\t}\n\n\tuseEffect(() => {\n\t\tsetPageTitle(page);\n    hideHeader();\n\n    if (!userInfo)\n      history.push('/');\n\n\t}, [open, page, hideHeader, dispatch, userInfo]);\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n\n\t\t\t<AdminAppbar\n\t\t\t\ttitle={pageTitle}\n\t\t\t\topen={open}\n\t\t\t\thandleDrawerOpen={handleDrawerOpen}\n\t\t\t/>\n\n      <AdminDrawerMenu\n\t\t\t\ttheme={theme}\n\t\t\t\topen={open}\n\t\t\t\thandleDrawerClose={handleDrawerClose}\n\t\t\t\topenedMixin={openedMixin}\n\t\t\t\tclosedMixin={closedMixin}\n\t\t\t\tonChangePage={onChangePage}\n\t\t\t\tpage={page}\n\t\t\t/>\n\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3, background: '#f9f9f9' }}>\n        <DrawerHeader />\n        { switchContents(page) }\n      </Box>\n    </Box>\n  );\n}\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/Dashboard.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/CustomTable.js",["295"],"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableContainer from '@mui/material/TableContainer';\nimport TablePagination from '@mui/material/TablePagination';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport FilterListIcon from '@mui/icons-material/FilterList';\n\nimport CustomTableHead from './CustomTableHead';\nimport CustomTableBody from './CustomTableBody';\n\n\nconst EnhancedTableToolbar = (props) => {\n\n  const { selected, openEditPannel, deleteUser, numSelected } = props;\n\n  const handleDeleteClick = (e) => {\n    e.preventDefault();\n    deleteUser(selected[0]);\n  }\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n        }),\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Users\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <>\n          { numSelected === 1 &&\n            <Tooltip title=\"Edit\">\n              <IconButton\n                color=\"primary\"\n                onClick={() => openEditPannel(selected[0])}\n              >\n                <EditIcon />\n              </IconButton>\n            </Tooltip>\n          }\n          <Tooltip title=\"Delete\">\n            <IconButton\n              onClick={handleDeleteClick}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        </>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton>\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nexport default function CustomTable (props) {\n\n  const { columns, rows, type, edit } = props;\n\n  const [ order, setOrder ] = useState('asc');\n  const [ orderBy, setOrderBy ] = useState('calories');\n  const [ selected, setSelected ] = useState([]);\n  const [ page, setPage ] = useState(0);\n  const [ dense, setDense ] = useState(false);\n  const [ rowsPerPage, setRowsPerPage ] = useState(5);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const isSelected = (name) => selected.indexOf(name) !== -1;\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      { rows &&\n        (\n          <>\n            <Paper sx={{ width: '100%', mb: 2 }}>\n\n              <EnhancedTableToolbar\n                numSelected={selected.length}\n                selected={selected}\n                openEditPannel={(id) => edit(id)}\n              />\n\n              <TableContainer>\n                <Table\n                  sx={{ minWidth: 750 }}\n                  aria-labelledby=\"tableTitle\"\n                  size={dense ? 'small' : 'medium'}\n                >\n                  <CustomTableHead\n                    headCells={columns}\n                    numSelected={selected.length}\n                    order={order}\n                    orderBy={orderBy}\n                    onSelectAllClick={handleSelectAllClick}\n                    onRequestSort={handleRequestSort}\n                    rowCount={rows.length}\n                  />\n                  <CustomTableBody\n                    rows={rows}\n                    page={page}\n                    rowsPerPage={rowsPerPage}\n                    handleClick={handleClick}\n                    orderBy={orderBy}\n                    emptyRows={emptyRows}\n                    isSelected={isSelected}\n                    order={order}\n                    dataType={type}\n                  />\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </Paper>\n            <FormControlLabel\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\n              label=\"Dense padding\"\n            />\n          </>\n        )\n      }\n    </Box>\n  );\n}\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/CustomTableHead.js",["296"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TableCell from '@mui/material/TableCell';\nimport Checkbox from '@mui/material/Checkbox';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Box from '@mui/material/Box';\nimport { visuallyHidden } from '@mui/utils';\n\n\nCustomTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\n\nexport default function CustomTableHead (props) {\n\n  const {\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n    headCells\n  } = props;\n\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            color=\"primary\"\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{\n              'aria-label': 'select all desserts',\n            }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/CustomTableBody.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/users/UserAdminDashboard.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/users/CreateUser.js",["297"],"import React, { useEffect, useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\nimport FormContainer from '../../components/FormContainer';\nimport Loader from '../../components/Loader';\nimport Message from '../../components/Message';\nimport { register } from '../../actions/userActions';\nimport { USER_CREATE_RESET } from '../../constants/userConstants';\n\n\nexport default function CreateUser ({backToUserList}) {\n\n  const [ message, setMessage ] = useState('');\n  const [ user, setUser ] = useState({\n    name: '',\n    username: '',\n    password: '',\n    mobile: '',\n    type: ''\n  });\n\n  const dispatch = useDispatch();\n  const userRegister = useSelector(state => state.userRegister);\n  const { error, loading, userInfo } = userRegister;\n\n\n  const handleBackButtonClick = (event) => {\n    event.preventDefault();\n    backToUserList();\n  }\n\n\n  const handleOnChange = (event) => {\n    const { name, value } = event.target;\n    setUser({\n      ...user,\n      [name] : value\n    });\n  }\n\n  const createNewUser = (event) => {\n    event.preventDefault();\n    dispatch(register(user));\n  }\n\n\n  useEffect(() => {\n    if (userInfo) {\n      // after successful user creation, redirect back to user list page\n      setMessage(\"User Created Successfully!\");\n      setUser({\n        name: '',\n        username: '',\n        password: '',\n        mobile: '',\n        type: ''\n      })\n    }\n\n    return (() => {\n      if (userInfo)\n        dispatch({\n          type: USER_CREATE_RESET\n        });\n    });\n  }, [userInfo]);\n\n  return (\n    <>\n      <Button\n        onClick={handleBackButtonClick}\n        startIcon={<ArrowBackIcon />}\n      >\n        Back\n      </Button>\n      <Paper\n        sx={{ paddingTop: '20px', paddingBottom: '50px'}}\n      >\n        <FormContainer>\n          <h4>Create New User</h4>\n          {message !== '' && <Message variant='success'>{message}</Message>}\n          {error && <Message variant='danger'>{error}</Message>}\n          {loading && <Loader />}\n          <Form onSubmit={createNewUser}>\n\n            <Form.Group controlId='name'>\n              <Form.Label>Full Name</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Enter Full Name\"\n                name='name'\n                value={user.name}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='username'>\n              <Form.Label>Email Address</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Enter Email Address\"\n                name='username'\n                value={user.username}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='mobile'>\n              <Form.Label>Mobile Number</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Enter Mobile Number\"\n                name='mobile'\n                value={user.mobile}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='password'>\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                required\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                name='password'\n                value={user.password}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='type'>\n              <Form.Label>User Type</Form.Label>\n              <Form.Control\n                as=\"select\"\n                onChange={handleOnChange}\n                name=\"type\"\n                value={user.type}\n                required\n              >\n                <option>Select User Type</option>\n                <option value=\"customer\">Customer</option>\n                <option value=\"driver\">Driver</option>\n                <option value=\"admin\">Admin</option>\n              </Form.Control>\n            </Form.Group>\n\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Create User\n            </Button>\n\n          </Form>\n        </FormContainer>\n      </Paper>\n    </>\n  )\n}\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/users/EditUser.js",["298","299","300"],"import React, { useState, useEffect } from 'react';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport FormContainer from '../../components/FormContainer';\nimport Loader from '../../components/Loader';\nimport Message from '../../components/Message';\nimport { getUserDetails, updateUser, deleteUser } from '../../actions/userActions';\nimport { USER_UPDATE_RESET, USER_DELETE_RESET } from '../../constants/userConstants';\n\n\n\nexport default function EditUser ({closeEditUser, editingID}) {\n\n  const [ message, setMessage ] = useState('');\n  const [ user, setUser ] = useState({\n    name: '',\n    username: '',\n    mobile: '',\n    type: ''\n  });\n\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const { error, loading, userInfo } = userDetails;\n\n  const userUpdate = useSelector(state => state.userUpdate);\n  const { success } = userUpdate;\n\n  const userDelete = useSelector(state => state.userDelete);\n  const { loadingDelete, successDelete, errorDelete } = userDelete;\n\n  const handleOnChange = (event) => {\n    setUser({\n      ...user,\n      [event.target.name]: event.target.value\n    });\n  }\n\n  function handleOnSubmit (event) {\n    event.preventDefault();\n    dispatch(updateUser(editingID, user));\n  }\n\n\n  function handleDelete (event) {\n    event.preventDefault();\n    dispatch(deleteUser(editingID));\n  }\n\n\n  useEffect(() => {\n    if (editingID && editingID > 0) {\n      dispatch(getUserDetails(editingID));\n    }\n  }, [editingID]);\n\n  useEffect(() => {\n    if (userInfo) {\n      if (success)\n        setMessage('User Updated Successfully!');\n      else {\n        setUser({\n          name: userInfo.name,\n          username: userInfo.username,\n          mobile: userInfo.mobile,\n          type: userInfo.type\n        });\n      }\n    }\n\n    return (() => {\n      if (success)\n        dispatch({\n          type: USER_UPDATE_RESET,\n        });\n    });\n  }, [userInfo, success]);\n\n\n  useEffect(() => {\n    if (successDelete) {\n      closeEditUser();\n    }\n    else if (errorDelete) {\n      setMessage(errorDelete);\n    }\n\n    return(() => {\n      if (successDelete)\n        dispatch({\n          type: USER_DELETE_RESET\n        });\n    });\n  }, [errorDelete, successDelete]);\n\n\n  return (\n    <>\n      <Button\n        startIcon={<ArrowBackIcon/>}\n        onClick={() => closeEditUser()}\n      >\n        Back\n      </Button>\n      <h4>Edit User</h4>\n      <Paper sx={{ margin: '10px', paddingTop: '20px', paddingBottom: '20px'}}>\n        <FormContainer>\n          {message !== '' && <Message variant='success'>{message}</Message>}\n          {error && <Message variant='danger'>{error}</Message>}\n          {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n          {(loading || loadingDelete) && <Loader />}\n          <Form onSubmit={handleOnSubmit}>\n\n            <Form.Group controlId='name'>\n              <Form.Label>Full Name</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Enter Last Name\"\n                name='name'\n                value={user.name}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='username'>\n              <Form.Label>Email Address</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Enter Email Address\"\n                name='username'\n                value={user.username}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='mobile'>\n              <Form.Label>Mobile Number</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Enter Mobile Number\"\n                name='mobile'\n                value={user.mobile}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='type'>\n              <Form.Label>User Type</Form.Label>\n              <Form.Control\n                as=\"select\"\n                onChange={handleOnChange}\n                name=\"type\"\n                value={user.type}\n              >\n                <option>Select User Type</option>\n                <option value=\"customer\">Customer</option>\n                <option value=\"driver\">Driver</option>\n                <option value=\"admin\">Admin</option>\n              </Form.Control>\n            </Form.Group>\n\n            <Box sx={{ display: 'flex', justifyContent: 'space-between'}}>\n              <Button\n                variant=\"contained\"\n                type=\"submit\"\n              >\n                Save Changes\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"error\"\n                onClick={handleDelete}\n              >\n                Delete User\n              </Button>\n            </Box>\n\n          </Form>\n        </FormContainer>\n      </Paper>\n    </>\n  )\n}\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/driver/Dashboard.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/products/ProductDashboard.js",[],"/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/products/CreateProduct.js",["301"],"import React, { useState, useEffect } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\nimport FormContainer from '../../components/FormContainer';\nimport Loader from '../../components/Loader';\nimport Message from '../../components/Message';\nimport { createProduct } from '../../actions/productActions';\nimport { PRODUCT_CREATE_RESET } from '../../constants/productConstants';\n\n\nexport default function CreateProduct ({backToProductList}) {\n\n  const [ message, setMessage ] = useState('');\n  const [ newProduct, setNewProduct ] = useState({\n    description: '',\n    name: '',\n    price: '0.00'\n  });\n\n  const dispatch = useDispatch();\n  const { loading, error, product } = useSelector(state => state.productCreate);\n\n  const handleBackButtonClick = (e) => {\n    e.preventDefault();\n    backToProductList();\n  }\n\n  const handleOnChange = (e) => {\n    setNewProduct({\n      ...newProduct,\n      [e.target.name] : e.target.value\n    });\n  }\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    const { error, errorMessage } = validateNewProduct(newProduct);\n\n    if (error) {\n      setMessage(errorMessage);\n    }\n    else {\n      dispatch(\n        createProduct(newProduct)\n      );\n    }\n  }\n\n  const validateNewProduct = (newProduct) => {\n    if (newProduct.description && newProduct.description === '')\n      return { error : true, errorMessage: 'Empty Description*' };\n\n    if (newProduct.name && newProduct.name === '')\n      return { error : true, errorMessage: 'Empty Name*' };\n\n    if (newProduct.price && (newProduct.price === '' || parseInt(newProduct.price) < 0) )\n      return { error : true, errorMessage: 'Invalid Price*'};\n\n    return { error: false };\n  }\n\n\n  useEffect(() => {\n    if (product) {\n      setMessage(`New Product Created, ${newProduct.name}`);\n      setNewProduct({\n        description: '',\n        name: '',\n        price: '0.00'\n      });\n    }\n\n    return (() => {\n      if (product) {\n        dispatch({\n          type: PRODUCT_CREATE_RESET\n        });\n        setMessage('');\n      }\n    });\n  }, [product]);\n\n\n  return (\n    <>\n      <Button\n        onClick={handleBackButtonClick}\n        startIcon={<ArrowBackIcon />}\n      >\n        Back\n      </Button>\n      <Paper sx={{ paddingTop: '20px', paddingBottom: '50px'}}>\n        <FormContainer>\n          <h4>Create Product</h4>\n          {message !== '' && <Message variant='success'>{message}</Message>}\n          {error && <Message variant='danger'>{error}</Message>}\n          {loading && <Loader />}\n          <Form onSubmit={handleFormSubmit}>\n\n            <Form.Group controlId='name'>\n              <Form.Label>Product Name</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Beef Pepperoni\"\n                name='name'\n                value={newProduct.name}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='description'>\n              <Form.Label>Product Description</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Tasty Pizza with Pineapple\"\n                name='description'\n                value={newProduct.description}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='price'>\n              <Form.Label>Product Price</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"18.00\"\n                name='price'\n                value={newProduct.price}\n                onChange={handleOnChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formFile\" className=\"mb-3\">\n              <Form.Label>Upload Product Image</Form.Label>\n              <Form.Control type=\"file\" />\n            </Form.Group>\n\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Create Product\n            </Button>\n\n          </Form>\n        </FormContainer>\n      </Paper>\n    </>\n  );\n}\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/products/ProductList.js",["302","303","304"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport FileDownloadIcon from '@mui/icons-material/FileDownload';\nimport RefreshIcon from '@mui/icons-material/Refresh';\n\nimport CustomTable from '../CustomTable';\nimport EditProduct from './EditProduct';\nimport { listProducts } from '../../actions/productActions';\n\n\nconst styles = {\n  topContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: '25px',\n    padding: '10px'\n  }\n};\n\n\nconst columns = [\n  { id: '_id', label: 'ID', maxWidth: 70 },\n  { id: 'name', label: 'Name', minWidth: 170 },\n  {\n    id: 'description',\n    label: 'Description',\n    minWidth: 170,\n    align: 'right'\n  },\n  {\n    id: 'price',\n    label: 'Price',\n    maxWidth: 100,\n    align: 'right',\n  },\n  {\n    id: 'numReviews',\n    label: 'Number of Reviews',\n    maxWidth: 120,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'rating',\n    label: 'Rating',\n    maxWidth: 150,\n    align: 'right',\n    format: (value) => value.toFixed(2),\n  },\n];\n\n\nexport default function ProductList ({addNewProduct}) {\n\n  const [ openEditProduct, setOpenEditProduct ] = useState(false);\n  const [ editingID, setEditingID ] = useState(null);\n\n  const dispatch = useDispatch();\n  const { loading, error, products } = useSelector(state => state.productList);\n\n\n  const editProduct = (val) => {\n    setEditingID(val);\n    setOpenEditProduct(true);\n  }\n\n  const closeOpenEditProduct = () => setOpenEditProduct(false);\n\n  useEffect(() => {\n    if (!openEditProduct)\n      dispatch( listProducts() )\n  }, [openEditProduct]);\n\n  return (\n    <>\n      {openEditProduct ?\n        (<EditProduct\n            editingID={editingID}\n            backToProductList={closeOpenEditProduct}\n          />)\n        : (\n          <>\n            <Paper sx={styles.topContainer}>\n              <Box sx={{width: '40%', maxWidth: '400px'}}>\n                <TextField fullWidth label=\"Search\" variant=\"outlined\" size=\"small\"/>\n              </Box>\n\n              <Box>\n                <Button\n                  sx={{margin: '10px'}}\n                  variant=\"contained\"\n                  color=\"success\"\n                  onClick={() => addNewProduct()}\n                  endIcon={<AddIcon />}\n                >\n                  Add\n                </Button>\n                <Button sx={{margin: '10px'}} variant=\"contained\" endIcon={<FileDownloadIcon />}>\n                  Export\n                </Button>\n                <IconButton>\n                  <RefreshIcon color=\"primary\" />\n                </IconButton>\n              </Box>\n            </Paper>\n            <CustomTable\n              columns={columns}\n              rows={products}\n              type='products'\n              edit={editProduct}\n            />\n          </>\n        )\n      }\n    </>\n  );\n}\n","/Users/kyawthit/Desktop/fl_projects/TrioPizza/TrioPizza/frontend/src/admin/products/EditProduct.js",["305","306","307","308","309"],{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"314","severity":1,"message":"315","line":57,"column":8,"nodeType":"316","endLine":57,"endColumn":37,"suggestions":"317"},{"ruleId":"318","severity":1,"message":"319","line":142,"column":84,"nodeType":"320","messageId":"321","endLine":142,"endColumn":86},{"ruleId":"314","severity":1,"message":"322","line":55,"column":8,"nodeType":"316","endLine":55,"endColumn":42,"suggestions":"323"},{"ruleId":"324","severity":1,"message":"325","line":1,"column":17,"nodeType":"326","messageId":"327","endLine":1,"endColumn":25},{"ruleId":"314","severity":1,"message":"328","line":35,"column":8,"nodeType":"316","endLine":35,"endColumn":26,"suggestions":"329"},{"ruleId":"324","severity":1,"message":"325","line":1,"column":17,"nodeType":"326","messageId":"327","endLine":1,"endColumn":25},{"ruleId":"324","severity":1,"message":"330","line":2,"column":10,"nodeType":"326","messageId":"327","endLine":2,"endColumn":14},{"ruleId":"318","severity":1,"message":"331","line":53,"column":22,"nodeType":"320","messageId":"321","endLine":53,"endColumn":24},{"ruleId":"314","severity":1,"message":"332","line":65,"column":8,"nodeType":"316","endLine":65,"endColumn":62,"suggestions":"333"},{"ruleId":"324","severity":1,"message":"334","line":68,"column":11,"nodeType":"326","messageId":"327","endLine":68,"endColumn":32},{"ruleId":"324","severity":1,"message":"335","line":1,"column":27,"nodeType":"326","messageId":"327","endLine":1,"endColumn":36},{"ruleId":"324","severity":1,"message":"335","line":1,"column":27,"nodeType":"326","messageId":"327","endLine":1,"endColumn":36},{"ruleId":"314","severity":1,"message":"315","line":43,"column":8,"nodeType":"316","endLine":43,"endColumn":46,"suggestions":"336"},{"ruleId":"324","severity":1,"message":"325","line":1,"column":17,"nodeType":"326","messageId":"327","endLine":1,"endColumn":25},{"ruleId":"324","severity":1,"message":"325","line":1,"column":17,"nodeType":"326","messageId":"327","endLine":1,"endColumn":25},{"ruleId":"318","severity":1,"message":"331","line":32,"column":22,"nodeType":"320","messageId":"321","endLine":32,"endColumn":24},{"ruleId":"314","severity":1,"message":"315","line":78,"column":8,"nodeType":"316","endLine":78,"endColumn":37,"suggestions":"337"},{"ruleId":"324","severity":1,"message":"338","line":2,"column":8,"nodeType":"326","messageId":"327","endLine":2,"endColumn":15},{"ruleId":"324","severity":1,"message":"339","line":18,"column":9,"nodeType":"326","messageId":"327","endLine":18,"endColumn":16},{"ruleId":"324","severity":1,"message":"340","line":14,"column":5,"nodeType":"326","messageId":"327","endLine":14,"endColumn":20},{"ruleId":"324","severity":1,"message":"341","line":19,"column":5,"nodeType":"326","messageId":"327","endLine":19,"endColumn":24},{"ruleId":"324","severity":1,"message":"342","line":28,"column":5,"nodeType":"326","messageId":"327","endLine":28,"endColumn":24},{"ruleId":"324","severity":1,"message":"343","line":117,"column":17,"nodeType":"326","messageId":"327","endLine":117,"endColumn":21},{"ruleId":"324","severity":1,"message":"344","line":147,"column":26,"nodeType":"326","messageId":"327","endLine":147,"endColumn":34},{"ruleId":"324","severity":1,"message":"344","line":187,"column":26,"nodeType":"326","messageId":"327","endLine":187,"endColumn":34},{"ruleId":"324","severity":1,"message":"345","line":21,"column":5,"nodeType":"326","messageId":"327","endLine":21,"endColumn":30},{"ruleId":"324","severity":1,"message":"344","line":240,"column":26,"nodeType":"326","messageId":"327","endLine":240,"endColumn":34},{"ruleId":"324","severity":1,"message":"344","line":279,"column":26,"nodeType":"326","messageId":"327","endLine":279,"endColumn":34},{"ruleId":"314","severity":1,"message":"315","line":94,"column":6,"nodeType":"316","endLine":94,"endColumn":20,"suggestions":"346"},{"ruleId":"314","severity":1,"message":"322","line":105,"column":5,"nodeType":"316","endLine":105,"endColumn":49,"suggestions":"347"},{"ruleId":"324","severity":1,"message":"335","line":1,"column":27,"nodeType":"326","messageId":"327","endLine":1,"endColumn":36},{"ruleId":"324","severity":1,"message":"325","line":1,"column":17,"nodeType":"326","messageId":"327","endLine":1,"endColumn":25},{"ruleId":"314","severity":1,"message":"315","line":70,"column":6,"nodeType":"316","endLine":70,"endColumn":16,"suggestions":"348"},{"ruleId":"314","severity":1,"message":"315","line":60,"column":6,"nodeType":"316","endLine":60,"endColumn":17,"suggestions":"349"},{"ruleId":"314","severity":1,"message":"315","line":82,"column":6,"nodeType":"316","endLine":82,"endColumn":25,"suggestions":"350"},{"ruleId":"314","severity":1,"message":"351","line":99,"column":6,"nodeType":"316","endLine":99,"endColumn":34,"suggestions":"352"},{"ruleId":"314","severity":1,"message":"353","line":85,"column":6,"nodeType":"316","endLine":85,"endColumn":15,"suggestions":"354"},{"ruleId":"324","severity":1,"message":"355","line":66,"column":11,"nodeType":"326","messageId":"327","endLine":66,"endColumn":18},{"ruleId":"324","severity":1,"message":"356","line":66,"column":20,"nodeType":"326","messageId":"327","endLine":66,"endColumn":25},{"ruleId":"314","severity":1,"message":"315","line":79,"column":6,"nodeType":"316","endLine":79,"endColumn":23,"suggestions":"357"},{"ruleId":"324","severity":1,"message":"358","line":10,"column":8,"nodeType":"326","messageId":"327","endLine":10,"endColumn":14},{"ruleId":"324","severity":1,"message":"355","line":26,"column":11,"nodeType":"326","messageId":"327","endLine":26,"endColumn":18},{"ruleId":"324","severity":1,"message":"359","line":28,"column":11,"nodeType":"326","messageId":"327","endLine":28,"endColumn":22},{"ruleId":"314","severity":1,"message":"315","line":68,"column":6,"nodeType":"316","endLine":68,"endColumn":36,"suggestions":"360"},{"ruleId":"314","severity":1,"message":"361","line":102,"column":6,"nodeType":"316","endLine":102,"endColumn":22,"suggestions":"362"},"no-native-reassign",["363"],"no-negated-in-lhs",["364"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["365"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["366"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["367"],"'Link' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["368"],"'successPaymentHandler' is assigned a value but never used.","'useEffect' is defined but never used.",["369"],["370"],"'Cookies' is defined but never used.","'history' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'data' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.",["371"],["372"],["373"],["374"],["375"],"React Hook useEffect has missing dependencies: 'closeEditUser' and 'dispatch'. Either include them or remove the dependency array. If 'closeEditUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["376"],"React Hook useEffect has missing dependencies: 'dispatch' and 'newProduct.name'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMessage' needs the current value of 'newProduct.name'.",["377"],"'loading' is assigned a value but never used.","'error' is assigned a value but never used.",["378"],"'Loader' is defined but never used.","'updateError' is assigned a value but never used.",["379"],"React Hook useEffect has missing dependencies: 'dispatch', 'product.description', 'product.name', and 'product.price'. Either include them or remove the dependency array.",["380"],"no-global-assign","no-unsafe-negation",{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"381","fix":"391"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},"Update the dependencies array to be: [history, userInfo, redirect, dispatch]",{"range":"412","text":"413"},"Update the dependencies array to be: [dispatch, keyword, displayHeader, history]",{"range":"414","text":"415"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"416","text":"417"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"418","text":"419"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"420","text":"421"},{"range":"422","text":"413"},"Update the dependencies array to be: [dispatch, openEditUser]",{"range":"423","text":"424"},"Update the dependencies array to be: [open, page, hideHeader, dispatch, userInfo, history]",{"range":"425","text":"426"},"Update the dependencies array to be: [dispatch, userInfo]",{"range":"427","text":"428"},"Update the dependencies array to be: [dispatch, editingID]",{"range":"429","text":"430"},"Update the dependencies array to be: [userInfo, success, dispatch]",{"range":"431","text":"432"},"Update the dependencies array to be: [closeEditUser, dispatch, errorDelete, successDelete]",{"range":"433","text":"434"},"Update the dependencies array to be: [dispatch, newProduct.name, product]",{"range":"435","text":"436"},"Update the dependencies array to be: [dispatch, openEditProduct]",{"range":"437","text":"438"},"Update the dependencies array to be: [editingID, backToProductList, dispatch]",{"range":"439","text":"440"},"Update the dependencies array to be: [dispatch, product.description, product.name, product.price, updatedProduct]",{"range":"441","text":"442"},[1514,1543],"[history, userInfo, redirect, dispatch]",[1549,1583],"[dispatch, keyword, displayHeader, history]",[1268,1286],"[success, history, order._id, dispatch]",[2275,2329],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]",[1432,1470],"[user, userId, successUpdate, history, dispatch]",[2107,2136],[2132,2146],"[dispatch, openEditUser]",[2628,2672],"[open, page, hideHeader, dispatch, userInfo, history]",[1708,1718],"[dispatch, userInfo]",[1708,1719],"[dispatch, editingID]",[2143,2162],"[userInfo, success, dispatch]",[2429,2457],"[closeEditUser, dispatch, errorDelete, successDelete]",[2246,2255],"[dispatch, newProduct.name, product]",[1932,1949],"[dispatch, openEditProduct]",[2122,2152],"[editingID, backToProductList, dispatch]",[2813,2829],"[dispatch, product.description, product.name, product.price, updatedProduct]"]